// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestDBProj;

namespace TestDBProj.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211119210754_BikeUserInformationJoinAndBikeBikeRackLocationsJoin")]
    partial class BikeUserInformationJoinAndBikeBikeRackLocationsJoin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TestDBProj.Models.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer")
                        .HasColumnName("serial_number");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_bike");

                    b.ToTable("bike", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.BikeRackLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("TripsTotal")
                        .HasColumnType("integer")
                        .HasColumnName("trips_total");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_bikeracklocation");

                    b.ToTable("bikeracklocation", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_BikeRackLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_id");

                    b.Property<Guid>("BikeRackLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_rack_location_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_bike_bikeracklocation");

                    b.HasIndex("BikeId")
                        .HasDatabaseName("ix_bike_bikeracklocation_bike_id");

                    b.HasIndex("BikeRackLocationId")
                        .HasDatabaseName("ix_bike_bikeracklocation_bike_rack_location_id");

                    b.ToTable("bike_bikeracklocation", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_ModelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("ModelTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_type_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_bike_modeltypes");

                    b.HasIndex("BikeId")
                        .HasDatabaseName("ix_bike_modeltypes_bike_id");

                    b.HasIndex("ModelTypeId")
                        .HasDatabaseName("ix_bike_modeltypes_model_type_id");

                    b.ToTable("bike_modeltypes", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_UserInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserInformationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_information_id");

                    b.HasKey("Id")
                        .HasName("pk_bike_userinformation");

                    b.HasIndex("BikeId")
                        .HasDatabaseName("ix_bike_userinformation_bike_id");

                    b.HasIndex("UserInformationId")
                        .HasDatabaseName("ix_bike_userinformation_user_information_id");

                    b.ToTable("bike_userinformation", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.ModelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_modeltype");

                    b.ToTable("modeltype", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.UserInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_userinformation");

                    b.ToTable("userinformation", "csc4402");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_BikeRackLocation", b =>
                {
                    b.HasOne("TestDBProj.Models.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .HasConstraintName("fk_bike_bikeracklocation_bike_bike_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDBProj.Models.BikeRackLocation", "BikeRackLocation")
                        .WithMany()
                        .HasForeignKey("BikeRackLocationId")
                        .HasConstraintName("fk_bike_bikeracklocation_bikeracklocation_bike_rack_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("BikeRackLocation");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_ModelType", b =>
                {
                    b.HasOne("TestDBProj.Models.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .HasConstraintName("fk_bike_modeltypes_bike_bike_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDBProj.Models.ModelType", "ModelType")
                        .WithMany()
                        .HasForeignKey("ModelTypeId")
                        .HasConstraintName("fk_bike_modeltypes_modeltype_model_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("ModelType");
                });

            modelBuilder.Entity("TestDBProj.Models.Bike_UserInformation", b =>
                {
                    b.HasOne("TestDBProj.Models.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .HasConstraintName("fk_bike_userinformation_bike_bike_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDBProj.Models.UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserInformationId")
                        .HasConstraintName("fk_bike_userinformation_userinformation_user_information_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
